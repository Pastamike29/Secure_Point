import React, { useState } from 'react';
import {
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Box,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  IconButton,
} from '@mui/material';
import { UploadFile, Close } from '@mui/icons-material';
import AdminDashboardLayout from '../Component/AdminDashboardLayout';
import Papa from 'papaparse';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export default function AddVulnerability() {
  const [openModal, setOpenModal] = useState(false);
  const [files, setFiles] = useState<File[]>([]);
  const [vulName, setVulName] = useState('');
  const [vulType, setVulType] = useState('');
  const [issueName, setIssuename] = useState('');
  const [description, setDescription] = useState('');
  const [recommendation, setRecommendation] = useState('');
  const [openDialog, setOpenDialog] = useState(false);

  const handleOpenModal = () => {
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
    setFiles([]); // Clear files when modal is closed
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFiles = event.target.files;
    if (selectedFiles) {
      const validFiles = Array.from(selectedFiles).filter((file) =>
        file.name.endsWith('.csv')
      );
      if (validFiles.length > 0) {
        setFiles((prevFiles) => [...prevFiles, ...validFiles]);
      } else {
        toast.error('Please select valid .CSV files.');
      }
    }
  };

  const handleFileRemove = (fileToRemove: File) => {
    setFiles((prevFiles) => prevFiles.filter((file) => file !== fileToRemove));
  };

  const parseCSVFile = (file: File, callback: (data: any[]) => void) => {
    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: (results) => {
        if (results.errors.length > 0) {
          toast.error(`Failed to parse ${file.name}. Please check the file format.`);
          return;
        }
  
        // Sanitize the data by trimming whitespace
        const sanitizedData = results.data.map((row: any) => {
          const sanitizedRow: any = {};
          for (const key in row) {
            if (row.hasOwnProperty(key)) {
              sanitizedRow[key] = typeof row[key] === 'string' ? row[key].trim() : row[key];
            }
          }
          return sanitizedRow;
        });
  
        // Filter out rows without issueName
        const validData = sanitizedData.filter((row: any) => row.issueName);
        if (validData.length === 0) {
          toast.error(`No valid data found in ${file.name}.`);
        } else {
          callback(validData);
        }
      },
      error: () => {
        toast.error(`Failed to parse ${file.name}.`);
      },
    });
  };
  

  const sendDataToBackend = async (vulnerabilities: any[]) => {
    try {
      const response = await fetch('http://localhost:5000/api/vulnerabilities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(vulnerabilities),
      });

      if (!response.ok) {
        throw new Error('Failed to upload vulnerabilities');
      }

      const data = await response.json();
      console.log('Uploaded successfully:', data);
      toast.success('Data uploaded successfully!');
    } catch (error) {
      console.error('Error uploading vulnerabilities:', error);
      toast.error('Failed to upload data. Please try again.');
    }
  };

  const handleConfirmUpload = () => {
    if (files.length === 0) {
      toast.error('No files selected. Please select files.');
      return;
    }

    files.forEach((file) => {
      parseCSVFile(file, (vulnerabilities) => {
        // Call the backend API to upload data
      sendDataToBackend(vulnerabilities);
      });
    });

    toast.success('Files processed successfully!');
    setFiles([]);
    setOpenModal(false);
  };





  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (files.length > 0) {
      toast.success('Submit success!');
      resetForm();
    } else {
      const formData = {
        vulName,
        vulType,
        issueName,
        description,
        recommendation,
      };
    
      toast.success('Submit success!');
      resetForm();
    }
  };

  const resetForm = () => {
    setFiles([]);
    setVulName('');
    setVulType('');
    setIssuename('');
    setDescription('');
    setRecommendation('');
  };

  const handleCancelClick = () => {
    setOpenDialog(true);
  };

  const handleDialogClose = (confirm: boolean) => {
    setOpenDialog(false);
    if (confirm) {
      resetForm();
    }
  };

  return (
    <AdminDashboardLayout title="Vulnerability Management">
      <ToastContainer />
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Card sx={{ width: '90%' }}>
            <CardContent>
              <Typography variant="h6" gutterBottom>
                Add Vulnerability
              </Typography>

              <Button
                variant="contained"
                startIcon={<UploadFile />}
                size="small"
                onClick={handleOpenModal}
              >
                Upload CSV Files
              </Button>

              <Dialog
                open={openModal}
                onClose={handleCloseModal}
                sx={{ '& .MuiDialog-paper': { width: '600px', maxWidth: '90%' } }}
              >
                <DialogTitle>
                  Upload CSV Files
                  <IconButton
                    aria-label="close"
                    onClick={handleCloseModal}
                    sx={{ position: 'absolute', right: 8, top: 8 }}
                  >
                    <Close />
                  </IconButton>
                </DialogTitle>
                <DialogContent>
                  <Button
                    variant="outlined"
                    component="label"
                    startIcon={<UploadFile />}
                    fullWidth
                  >
                    Select Files
                    <input
                      type="file"
                      accept=".csv"
                      hidden
                      multiple
                      onChange={handleFileChange}
                    />
                  </Button>
                  <Box mt={2}>
                    {files.map((file) => (
                      <Box
                        key={file.name}
                        display="flex"
                        alignItems="center"
                        justifyContent="space-between"
                        sx={{ mb: 1 }}
                      >
                        <Typography variant="body2">{file.name}</Typography>
                        <IconButton
                          onClick={() => handleFileRemove(file)}
                          color="error"
                          aria-label="remove file"
                        >
                          <Close />
                        </IconButton>
                      </Box>
                    ))}
                    {files.length === 0 && (
                      <Typography variant="body2" color="text.secondary">
                        No files selected.
                      </Typography>
                    )}
                  </Box>
                </DialogContent>
                <DialogActions>
                  <Button onClick={handleCloseModal} color="secondary">
                    Cancel
                  </Button>
                  <Button
                    onClick={handleConfirmUpload}
                    color="primary"
                    variant="contained"
                    disabled={files.length === 0}
                  >
                    Confirm Upload
                  </Button>
                </DialogActions>
              </Dialog>

              <form onSubmit={handleSubmit}>
                <TextField
                  fullWidth
                  label="Vulnerability Name"
                  value={vulName}
                  onChange={(e) => setVulName(e.target.value)}
                  margin="normal"
                />
                <FormControl fullWidth margin="normal">
                  <InputLabel id="vul-type-label">Vulnerability Type</InputLabel>
                  <Select
                    labelId="vul-type-label"
                    value={vulType}
                    onChange={(e) => setVulType(e.target.value)}
                  >
                    <MenuItem value="A01">A01: Broken Access Control</MenuItem>
                    <MenuItem value="A02">A02: Cryptographic Failures</MenuItem>
                    <MenuItem value="A03">A03: Injection</MenuItem>
                  </Select>
                </FormControl>
                <TextField
                  fullWidth
                  label="Issue Name"
                  value={issueName}
                  onChange={(e) => setIssuename(e.target.value)}
                  margin="normal"
                />
                <TextField
                  fullWidth
                  label="Description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  margin="normal"
                />
                <TextField
                  fullWidth
                  label="Recommendation"
                  value={recommendation}
                  onChange={(e) => setRecommendation(e.target.value)}
                  margin="normal"
                />
                <Box display="flex" justifyContent="space-between" mt={2}>
                  <Button type="submit" variant="contained" color="primary">
                    Submit
                  </Button>
                  <Button
                    variant="outlined"
                    color="secondary"
                    onClick={handleCancelClick}
                  >
                    Cancel
                  </Button>
                </Box>
              </form>

              <Dialog
                open={openDialog}
                onClose={() => setOpenDialog(false)}
              >
                <DialogTitle>Confirm Cancellation</DialogTitle>
                <DialogContent>
                  <Typography>
                    Are you sure you want to cancel? Any unsaved data will be lost.
                  </Typography>
                </DialogContent>
                <DialogActions>
                  <Button onClick={() => handleDialogClose(false)} color="secondary">
                    No
                  </Button>
                  <Button onClick={() => handleDialogClose(true)} color="primary">
                    Yes
                  </Button>
                </DialogActions>
              </Dialog>
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </AdminDashboardLayout>
  );
}
