import React, { useState } from 'react';
import {
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Box,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  IconButton,
} from '@mui/material';
import { UploadFile, Close } from '@mui/icons-material';
import AdminDashboardLayout from '../Component/AdminDashboardLayout';
import Papa from 'papaparse';
import { toast, ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import { SelectChangeEvent } from '@mui/material';


interface AddVulnerabilityProps {
  onUpload: (categories: { owasp: string; issueName: string }[]) => void;
}

export default function AddVulnerability() {
  const [openModal, setOpenModal] = useState(false); // Control modal open/close
  const [isFileValid, setIsFileValid] = useState<boolean>(false);

  const [file, setFile] = useState<File | null>(null);
  const [vulName, setVulName] = useState('');
  const [vulType, setVulType] = useState('');
  const [issueName, setIssuename] = useState('');
  const [sourceCodeJavascript, setSourceCodeJavascript] = useState('');
  const [solvedCodeJavascript, setSolvedCodeJavascript] = useState('');
  const [sourceCodeJava, setSourceCodeJava] = useState('');
  const [solvedCodeJava, setSolvedCodeJava] = useState('');
  const [sourceCodeDotnet, setSourceCodeDotnet] = useState('');
  const [solvedCodeDotnet, setSolvedCodeDotnet] = useState('');
  const [sourceCodePomXML, setSourceCodePomXML] = useState('');
  const [sourceCodeXML, setSourceCodeXML] = useState('');
  const [sourceCodeDockerfile, setSourceCodeDockerfile] = useState('');
  const [solvedCodePomXML, setSolvedCodePomXML] = useState('');
  const [solvedCodeXML, setSolvedCodeXML] = useState('');
  const [solvedCodeDockerfile, setSolvedCodeDockerfile] = useState('');
  const [recommendation, setRecommendation] = useState('');
  const [description, setDescription] = useState('');
  const [openDialog, setOpenDialog] = useState(false);
  const [selectedLanguage, setSelectedLanguage] = useState('javascript'); // Initial language set to JavaScript
  const [sourceCodeRows, setSourceCodeRows] = useState(7); // Initial rows for Source Code
  const [solvedCodeRows, setSolvedCodeRows] = useState(5); // Initial rows for Solution


  const handleOpenModal = () => {
    setOpenModal(true);
  };

  const handleCloseModal = () => {
    setOpenModal(false);
    setFile(null); // Reset file when modal is closed
  };

  const parseCSVFile = (file: File, callback: (vulnerabilities: any[]) => void) => {
    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: (results) => {
        console.log('Parsed Results:', results);
        if (results.errors.length > 0) {
          toast.error('CSV parsing failed. Please check the file format.');
          return;
        }
        const vulnerabilities = results.data.filter((row: any) => row.owasp && row.issueName);
        if (vulnerabilities.length === 0) {
          toast.error('No valid data found in the file.');
        } else {
          callback(vulnerabilities);
        }
      },
      error: (error) => {
        console.error('Parse Error:', error);
        toast.error('Failed to parse CSV file.');
      },
    });
  };





  const sendDataToBackend = async (vulnerabilities: {
    owasp: string;
    issueName: string;
    sub_issueName: string;
    description: string;
    recommendation: string;
    issueCode_Javascript: string;
    solveCode_Javascript: string;
    issueCode_Java: string;
    solveCode_Java: string;
    issueCode_Dotnet: string;
    issue_Pom_xml: string;
    solve_Pom_xml: string;
    issue_xml: string;
    solve_xml: string;
    issue_Dockerfile: string;
    solve_Dockerfile: string;
  }[]) => {
    try {
      const response = await fetch('http://localhost:5000/api/vulnerabilities', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(vulnerabilities),
      });

      if (!response.ok) {
        throw new Error('Failed to upload vulnerabilities');
      }

      const data = await response.json();
      console.log('Uploaded successfully:', data);
    } catch (error) {
      console.error('Error uploading vulnerabilities:', error);
    }
  };

  const handleConfirmUpload = () => {
    if (!file) {
      toast.error('No file selected. Please select a file.');
      return;
    }

    parseCSVFile(file, (vulnerabilities) => {
      setOpenModal(false);
      toast.success('Uploaded Successfully!');
      sendDataToBackend(vulnerabilities);
    });
  };
  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const selectedFile = event.target.files?.[0];
    
    if (selectedFile) {
      const fileExtension = selectedFile.name.split('.').pop()?.toLowerCase();
      
      // Check if the file has a .csv extension
      if (fileExtension === 'csv') {
        setFile(selectedFile);
        setIsFileValid(true);  // Enable the Confirm Upload button
      } else {
        toast.error('Please select a .CSV file.');
        setIsFileValid(false);  // Disable the Confirm Upload button
      }
    }
  };
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();

    if (file) {
      // Clear all fields and reset after successful submission
      toast.success('Submit success!');
      resetForm();
    } else {
      // Handle form data submission when no file is uploaded
      const formData = {
        vulName,
        vulType,
        issueName,
        recommendation,
        description,
      };

      console.log(formData);
      toast.success('Submit success!');
      resetForm();
    }
  };

  const resetForm = () => {
    setFile(null);
    setVulName('');
    setVulType('');
    setIssuename('');
    setRecommendation('');
    setDescription('');
    setSourceCodeJavascript('');
    setSolvedCodeJavascript('');
    setSourceCodeJava('');
    setSolvedCodeJava('');
    setSourceCodeDotnet('');
    setSourceCodePomXML('');
    setSourceCodeXML('');
    setSourceCodeDockerfile('');
    setSolvedCodePomXML('');
    setSolvedCodeXML('');
    setSolvedCodeDockerfile('');
    setSolvedCodeDotnet('');

    // Reset the file input
    const fileInput = document.getElementById('upload-file') as HTMLInputElement;
    if (fileInput) {
      fileInput.value = ''; // Clear file input field
    }
  };
  const handleCancelClick = () => {
    setOpenDialog(true);
  };

  const handleDialogClose = (confirm: boolean) => {
    setOpenDialog(false);
    if (confirm) {
      resetForm();
    }
  };

  const handleFileRemove = () => {
    resetForm();
  };

  const handleIssueCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    switch (selectedLanguage) {
      case 'javascript':
        setSourceCodeJavascript(value);
        break;
      case 'java':
        setSourceCodeJava(value);
        break;
      case 'dotnet':
        setSourceCodeDotnet(value);
        break;
      case 'PomXML':
        setSourceCodePomXML(value);
        break;
      case 'XML':
        setSourceCodeXML(value);
        break;
      case 'Docker':
        setSourceCodeDockerfile(value);
        break;
    }

    const lines = value.split('\n').length;
    setSourceCodeRows(lines > 5 ? Math.min(lines, 20) : 7); // Adjust source code input size
  };

  const handleSolvedCodeChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    switch (selectedLanguage) {
      case 'javascript':
        setSolvedCodeJavascript(value);
        break;
      case 'java':
        setSolvedCodeJava(value);
        break;
      case 'dotnet':
        setSolvedCodeDotnet(value);
        break;
      case 'PomXML':
        setSolvedCodePomXML(value);
        break;
      case 'XML':
        setSolvedCodeXML(value);
        break;
      case 'Docker':
        setSolvedCodeDockerfile(value);
        break;
    }

    const lines = value.split('\n').length;
    setSolvedCodeRows(lines > 5 ? Math.min(lines, 20) : 5); // Adjust solution input size
  };

  const handleLanguageChange = (event: SelectChangeEvent<string>) => {
    setSelectedLanguage(event.target.value);
  };

  return (
    <AdminDashboardLayout title="Vulnerability Management">
      <ToastContainer />
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Card sx={{ width: '90%' }}>
            <CardContent>
              <Box display="flex" justifyContent="space-between" alignItems="center">
                <Typography variant="h6" gutterBottom>
                  Add Vulnerability
                </Typography>
                <label htmlFor="upload-file">
                  <input
                    accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    style={{ display: 'none' }}
                    id="upload-file"
                    type="file"
                    onChange={handleFileChange}
                  />
                  <Button
                    variant="contained"
                    startIcon={<UploadFile />}
                    size="small"
                    onClick={handleOpenModal}
                  >
                    Upload .CSV file
                  </Button>
                </label>
                <Dialog open={openModal} onClose={handleCloseModal}>
                  <DialogTitle>
                    Upload Vulnerabilities CSV
                    <IconButton
                      aria-label="close"
                      onClick={handleCloseModal}
                      sx={{ position: 'absolute', right: 8, top: 8 }}
                    >
                      <Close />
                    </IconButton>
                  </DialogTitle>
                  <DialogContent>
                    <Box>
                      <Button
                        variant="outlined"
                        component="label"
                        startIcon={<UploadFile />}
                        fullWidth
                        sx={{ marginTop: 2 }}
                      >
                        Select File
                        <input
                          type="file"
                          accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                          hidden
                          onChange={handleFileChange}
                        />
                      </Button>
                    </Box>
                    {file && (
                      <Typography variant="body2" color="text.secondary" sx={{ marginTop: 2 }}>
                        Selected File: {file.name}
                      </Typography>
                    )}
                  </DialogContent>
                  <DialogActions>
                    <Button onClick={handleCloseModal} color="secondary">
                      Cancel
                    </Button>
                    <Button
                      onClick={handleConfirmUpload}
                      color="primary"
                      variant="contained"
                      disabled={!file}
                    >
                      Confirm Upload
                    </Button>
                  </DialogActions>
                </Dialog>

              </Box>

              <form onSubmit={handleSubmit}>
                <TextField
                  fullWidth
                  label="Vulnerability Name"
                  value={vulName}
                  onChange={(e) => setVulName(e.target.value)}
                  margin="normal"
                  required={!file}
                />

                <FormControl fullWidth margin="normal">
                  <InputLabel id="vul-type-label">Vulnerability type (OWASP)</InputLabel>
                  <Select
                    labelId="vul-type-label"
                    value={vulType}
                    onChange={(e) => setVulType(e.target.value)}
                    label="Vulnerability Type"
                    required={!file}
                  >
                    <MenuItem value="A01">A01: Broken Access Control</MenuItem>
                    <MenuItem value="A02">A02: Cryptographic Failures</MenuItem>
                    <MenuItem value="A03">A03: Injection</MenuItem>
                    <MenuItem value="A04">A04: Insecure Design</MenuItem>
                    <MenuItem value="A05">A05: Security Misconfiguration</MenuItem>
                    <MenuItem value="A06">A06: Vulnerable and Outdated Components</MenuItem>
                    <MenuItem value="A07">A07: Identification and Authentication Failures</MenuItem>
                    <MenuItem value="A08">A08: Software and Data Integrity Failures</MenuItem>
                    <MenuItem value="A09">A09: Security Logging and Monitoring Failures</MenuItem>
                    <MenuItem value="A10">A10: Server-Side Request Forgery (SSRF)</MenuItem>
                  </Select>
                </FormControl>


                <TextField
                  fullWidth
                  label="IssueName"
                  value={issueName}
                  onChange={(e) => setIssuename(e.target.value)}
                  margin="normal"
                  multiline
                  rows={1}
                  required={!file}
                />


                <FormControl fullWidth margin="normal">
                  <InputLabel id="language-select-label">Select Language</InputLabel>
                  <Select
                    labelId="language-select-label"
                    value={selectedLanguage}
                    onChange={handleLanguageChange}
                    label="Select Language"
                  >
                    <MenuItem value="javascript">JavaScript</MenuItem>
                    <MenuItem value="java">Java</MenuItem>
                    <MenuItem value="dotnet">.NET</MenuItem>
                    <MenuItem value="PomXML">Pom XML</MenuItem>
                    <MenuItem value="XML">XML</MenuItem>
                    <MenuItem value="Docker File">Docker File</MenuItem>
                  </Select>
                </FormControl>


                <TextField
                  fullWidth
                  label={`Source Code (Issue) - ${selectedLanguage}`}
                  value={
                    selectedLanguage === 'javascript'
                      ? sourceCodeJavascript
                      : selectedLanguage === 'java'
                        ? sourceCodeJava
                        : selectedLanguage === 'dotnet'
                          ? sourceCodeDotnet
                          : selectedLanguage === 'PomXML'
                            ? sourceCodePomXML
                            : selectedLanguage === 'XML'
                              ? sourceCodeXML
                              : sourceCodeDockerfile
                  }
                  onChange={handleIssueCodeChange}
                  margin="normal"
                  multiline
                  rows={sourceCodeRows}
                />

                <TextField
                  fullWidth
                  label={`Source Code (Solve method) - ${selectedLanguage}`}
                  value={
                    selectedLanguage === 'javascript'
                      ? solvedCodeJavascript
                      : selectedLanguage === 'java'
                        ? solvedCodeJava
                        : selectedLanguage === 'dotnet'
                          ? solvedCodeDotnet
                          : selectedLanguage === 'PomXML'
                            ? solvedCodePomXML
                            : selectedLanguage === 'XML'
                              ? solvedCodeXML
                              : solvedCodeDockerfile
                  }
                  onChange={handleSolvedCodeChange}
                  margin="normal"
                  multiline
                  rows={solvedCodeRows}
                  required={!file}
                />

                <TextField
                  fullWidth
                  label="Description"
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  margin="normal"
                  multiline
                  rows={3}
                  required={!file}
                />

                <TextField
                  fullWidth
                  label="Recommendation"
                  value={recommendation}
                  onChange={(e) => setRecommendation(e.target.value)}
                  margin="normal"
                  multiline
                  rows={2}
                  required={!file}
                />


                <Box display="flex" justifyContent="space-between" mt={2}>
                  <Box sx={{ marginTop: 2 }}>
                    <Button
                      type="submit"
                      variant="contained"
                      color="primary"
                      fullWidth
                      disabled={!vulName || !vulType || (!file && !description)}
                    >
                      Submit
                    </Button>
                  </Box>
                  <Button variant="outlined" color="secondary" onClick={handleCancelClick}>
                    Cancel
                  </Button>
                </Box>
              </form>

              {file && (
                <Box display="flex" alignItems="center" mt={2}>
                  <Typography>Selected File: {file.name}</Typography>
                  <IconButton onClick={handleFileRemove} color="error" aria-label="remove file">
                    <Close />
                  </IconButton>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>

      <Dialog open={openDialog} onClose={() => setOpenDialog(false)}>
        <DialogTitle>Confirm Cancellation</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to cancel? Any unsaved data will be lost.
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenDialog(false)} color="secondary">
            No
          </Button>
          <Button onClick={() => handleDialogClose(true)} color="primary">
            Yes
          </Button>
        </DialogActions>
      </Dialog>
    </AdminDashboardLayout>
  );
}
